@page "/match"
@using System.Diagnostics
@using System.ComponentModel
@using ConsoleApp1.Models
@using Dapper
@using Dommel
@using HuntStats.Data
@using HuntStats.Features
@using HuntStats.Models
@using HuntStats.State
@using MediatR
@inject IFolderPicker _folderPicker
@inject IDbConnectionFactory _connectionFactory;
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject AppState AppState

<div class="card-container" style="max-width: 1280px;margin:  auto;">
    <div class="card">
        <div class="card-body">
            <h3>Matches</h3>
            
            <div class="table-wrapper">
                <table class="table table-dark data-table" style="margin-bottom: 0 !important;">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Date</th>
                            <th scope="col">Teams</th>
                            <th scope="col">Total Players</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var match in Matches)
                    {
                        <tr>
                            <th scope="row">@match.Id</th>
                            <td>@match.DateTime.ToLocalTime()</td>
                            <td>@match.Teams.Count</td>
                            <td>@match.Teams.Select(x => x.Players.Count).Sum()</td>
                            <td>
                                <div @onclick='() => { NavigationManager.NavigateTo("/match/" + match.Id); }' class="btn btn-primary">
                                    <i class="fal fa-eye"></i>
                                </div>
                                <div class="btn btn-primary">
                                    <i class="fal fa-trash"></i>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {

    public List<HuntMatch> Matches;
    public BackgroundWorker worker { get; set; }
    public bool RunBackgroundTask { get; set; } = false;
    public string FilePath { get; set; }
    public string Path { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        AppState.NewMatchAdded += AppStateOnNewMatchAdded;
        Matches = await Mediator.Send(new GetMatchCommand());
    }

    private async void AppStateOnNewMatchAdded()
    {
        Matches = await Mediator.Send(new GetMatchCommand());
        await InvokeAsync(StateHasChanged);
    }

    public async Task ToggleCheck()
    {
        if (!worker.CancellationPending)
        {
            if (worker.IsBusy)
            {
                worker.CancelAsync();
            }
            else
            {
                worker.RunWorkerAsync();
            }
        }
        StateHasChanged();
    }
}