@page "/match"
@using System.Diagnostics
@using System.ComponentModel
@using Dapper
@using Dommel
@using HuntStats.Data
@using HuntStats.Features
@using HuntStats.Models
@using HuntStats.State
@using MediatR
@inject IFolderPicker _folderPicker
@inject IDbConnectionFactory _connectionFactory;
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject AppState AppState

<div class="card-container" style="max-width: 1280px;margin:  auto;">
    <h3>Matches</h3>
    <div class="card">
        <div class="card-body">
            <DropdownSelect TValue="OrderType" ValueChanged="HandleOrderTypeChange" SearchDisabled="true" Value="OrderType" ListItems="ListItems"></DropdownSelect>
            <div class="table-wrapper mt-2">
                <table class="table table-dark data-table" style="margin-bottom: 0 !important;">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Datssse</th>
                            <th scope="col">Teams</th>
                            <th scope="col">Total Players</th>
                            @if (Settings.PlayerProfileId != null || Settings.PlayerProfileId != string.Empty || Settings.PlayerProfileId != "0")
                            {
                                <th>
                                    MMR
                                </th>
                            }
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var match in Matches)
                    {
                        <tr>
                            <th scope="row">@match.Id</th>
                            <td>@match.DateTime.ToLocalTime()</td>
                            <td>@match.Teams.Count</td>
                            <td>@match.Teams.Select(x => x.Players.Count).Sum()</td>
                            @if (Settings.PlayerProfileId != null || Settings.PlayerProfileId != string.Empty || Settings.PlayerProfileId != "0")
                            {
                                <td>
                                    @if (match.Teams.FirstOrDefault(x => x.Players.FirstOrDefault(y => y.ProfileId == Settings.PlayerProfileId) != null) != null)
                                    {
                                        @match.Teams.FirstOrDefault(x => x.Players.FirstOrDefault(y => y.ProfileId == Settings.PlayerProfileId) != null).Players.FirstOrDefault(x => x.ProfileId == Settings.PlayerProfileId).Mmr
                                    }
                                </td>
                            }
                            @if (DeleteMatches.Contains(match))
                            {
                                <td>
                                    <div class="btn btn-primary" @onclick="async () => { await DeleteMatch(match); }" color="">
                                        <i class="fal fa-check" style="color: #C6EBC5;"></i>
                                    </div>
                                    <div @onclick="() => { RemoveFromDelete(match); }" class="btn btn-primary" color="">
                                        <i class="fal fa-times" style="color: #F96666;"></i>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <div @onclick='() => { NavigationManager.NavigateTo("/match/" + match.Id); }' class="btn btn-primary">
                                        <i class="fal fa-eye"></i>
                                    </div>
                                    <div @onclick="() => { AddToDelete(match); }" class="btn btn-primary">
                                        <i class="fal fa-trash"></i>
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {

    public OrderType OrderType { get; set; } = OrderType.Descending;

    public List<HuntMatch> DeleteMatches { get; set; } = new List<HuntMatch>();

    public List<DropdownSelect<OrderType>.ListItem> ListItems { get; set; } = new()
    {
        new()
        {
            Id = OrderType.Ascending,
            Variable = "Ascending"
        },
        new()
        {
            Id = OrderType.Descending,
            Variable = "Descending"
        }
    };
    public List<HuntMatch> Matches;
    public BackgroundWorker worker { get; set; }
    public bool RunBackgroundTask { get; set; } = false;
    public string FilePath { get; set; }
    public string Path { get; set; } = "";
    public Models.Settings Settings { get; set; }

    private async Task DeleteMatch(HuntMatch match)
    {
        await Mediator.Send(new RemoveMatchByIdCommand(match.Id));
    }

    private void AddToDelete(HuntMatch match)
    {
        DeleteMatches.Add(match);
    }

    private void RemoveFromDelete(HuntMatch match)
    {
        DeleteMatches.Remove(match);
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.NewMatchAdded += AppStateOnNewMatchAdded;
        Matches = await Mediator.Send(new GetMatchCommand());
        Settings = await Mediator.Send(new GetSettingsCommand());
    }

    private async Task HandleOrderTypeChange(OrderType value)
    {
        OrderType = value;
        Matches = await Mediator.Send(new GetMatchCommand()
        {
            OrderType = OrderType
        });
    }

    private async void AppStateOnNewMatchAdded()
    {
        Matches = await Mediator.Send(new GetMatchCommand()
        {
            OrderType = OrderType
        });
        await InvokeAsync(StateHasChanged);
    }

    public async Task ToggleCheck()
    {
        if (!worker.CancellationPending)
        {
            if (worker.IsBusy)
            {
                worker.CancelAsync();
            }
            else
            {
                worker.RunWorkerAsync();
            }
        }
        StateHasChanged();
    }
}