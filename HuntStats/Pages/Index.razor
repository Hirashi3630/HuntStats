@page "/"
@using System.Diagnostics
@using System.ComponentModel
@using Dapper
@using Dommel
@using HuntStats.Data
@using HuntStats.Features
@using HuntStats.Models
@using HuntStats.State
@using MediatR
@inject IFolderPicker _folderPicker
@inject IDbConnectionFactory _connectionFactory;
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IJSRuntime JS

<div class="card-container" style="margin:  auto;">
    <h3>Statistics</h3>
    <div class="chart-container d-flex flex-xl-row flex-column">
        <div class="card col position-relative me-xl-2" style="max-height: 750px;">
            <div class="card-body">
                <DropdownSelect TValue="int" SearchDisabled="true" ValueChanged="HandleKillChartChange" Value="KillChartAmount" ListItems="ListItems"></DropdownSelect>
                <div class="killChart" style="height: 400px !important;">
                    <canvas @ref="_killChart" id="chart" width="400" height="400">

                    </canvas >
                </div>
                <div class="d-flex flex-row justify-content-between mt-2">
                    <div class="stats" style="padding: 10px 15px; border: 2px solid #343740;border-radius: 15px;">
                        Total Kills: @TotalKills
                    </div>
                    <div class="stats" style="padding: 10px 15px; border: 2px solid #343740;border-radius: 15px;">
                        Your kills: @TotalYourKills
                    </div>
                    <div class="stats" style="padding: 10px 15px; border: 2px solid #343740;border-radius: 15px;">
                        Assists: @TotalAssists
                    </div>
                    <div class="stats" style="padding: 10px 15px; border: 2px solid #343740;border-radius: 15px;">
                        K/D: @(((double)TotalYourKills / TotalDeaths).ToString("#.##"))
                    </div>
                    <div class="stats" style="padding: 10px 15px; border: 2px solid #343740;border-radius: 15px;">
                        Deaths: @TotalDeaths
                    </div>
                </div>
            </div>
        </div>
        <div class="card col position-relative mt-4 mt-xl-0 ms-xl-2" style="max-height: 500px;">
            <div class="card-body">
                <DropdownSelect TValue="int" SearchDisabled="true" ValueChanged="HandleMmrChartChange" Value="MmrChartAmount" ListItems="ListItems"></DropdownSelect>
                <div class="mmrChart">
                    <canvas @ref="_mmrChart" id="chart" width="400" height="400">

                    </canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="chart-container d-flex flex-xl-row flex-column mt-3">
        <div class="card col position-relative me-xl-2" style="max-height: 750px;">
            <div class="card-body">
                <DropdownSelect TValue="int" SearchDisabled="true" ValueChanged="HandleMoneyChartChange" Value="MoneyChartAmount" ListItems="ListItems"></DropdownSelect>
                <div class="moneyChart">
                    <canvas @ref="_moneyChart" id="chart" width="400" height="400">

                    </canvas>
                </div>
            </div>
        </div>
        <div class="card col position-relative mt-4 mt-xl-0 ms-xl-2" style="max-height: 500px;">
            <div class="card-body">
                <DropdownSelect TValue="int" SearchDisabled="true" ValueChanged="HandleXpChartChange" Value="XpChartAmount" ListItems="ListItems"></DropdownSelect>
                <div class="moneyChart">
                    <canvas @ref="_xpChart" id="chart" width="400" height="400">

                    </canvas>
                </div>
            </div>
        </div>
    </div>
</div> 


@code {
    public bool RefreshChart { get; set; } = false;

    private ElementReference _mmrChart;
    private ElementReference _killChart;
    private ElementReference _moneyChart;
    private ElementReference _xpChart;

    public int MmrChartAmount { get; set; } = 25;
    public int MoneyChartAmount { get; set; } = 25;
    public int KillChartAmount { get; set; } = 25;
    public int XpChartAmount { get; set; } = 25;
    public int TotalKills { get; set; }
    public int TotalYourKills { get; set; }
    public int TotalDeaths { get; set; }
    public int TotalAssists { get; set; }

    public async Task HandleKillChartChange(int Id)
    {
        KillChartAmount = Id;
        await FetchKillChart(true);
    }
    
    public async Task HandleMmrChartChange(int Id)
    {
        MmrChartAmount = Id;
        await FetchMmrChart(true);
    }
    
    public async Task HandleMoneyChartChange(int Id)
    {
        MoneyChartAmount = Id;
        await FetchMoneyChart(true);
    }

    public async Task HandleXpChartChange(int Id)
    {
        XpChartAmount = Id;
        await FetchXpChart(true);
    }

    public List<DropdownSelect<int>.ListItem> ListItems { get; set; } = new()
    {
        new DropdownSelect<int>.ListItem()
        {
            Id = 5,
            Variable = "5"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 10,
            Variable = "10"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 25,
            Variable = "25"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 50,
            Variable = "50"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 100,
            Variable = "100"
        }
    };

    public BackgroundWorker worker { get; set; }
    public bool RunBackgroundTask { get; set; } = false;
    public string FilePath { get; set; }
    public string Path { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        AppState.NewMatchAdded += AppStateOnNewMatchAdded;
        await GetChartInfo();
    }

    private async void AppStateOnNewMatchAdded()
    {
        await GetChartInfo(true);
        StateHasChanged();
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetChartInfo(bool reset = false)
    {
        await FetchKillChart(reset);
        await FetchMmrChart(reset);
        await FetchMoneyChart(reset);
        await FetchXpChart(reset);
    }

    public async Task FetchKillChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _killChart);
        var killChartInfo = await Mediator.Send(new KillChartQuery(KillChartAmount));
        TotalKills = killChartInfo.Select(x => x.Kills).Sum();
        TotalYourKills = killChartInfo.Select(x => x.YourKills).Sum();
        TotalDeaths = killChartInfo.Select(x => x.Deaths).Sum();
        TotalAssists = killChartInfo.Select(x => x.Assists).Sum();
        await JS.InvokeAsync<string>("createChart", _killChart, new
        {
            labels = killChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "Total Kills",
                    Data = killChartInfo.Select(x => x.Kills).ToList(),
                    Fill = false,
                    BorderColor = "rgb(166, 35, 73)",
                    Tension = 0.4,
                    PointRadius = 3
                },
                new Dataset()
                {
                    Label = "Your kills",
                    Data = killChartInfo.Select(x => x.YourKills).ToList(),
                    Fill = false,
                    BorderColor = "rgb(208, 112, 0)",
                    Tension = 0.4,
                    PointRadius = 3
                },
                new Dataset()
                {
                    Label = "Deaths",
                    Data = killChartInfo.Select(x => x.Deaths).ToList(),
                    Fill = false,
                    BorderColor = "rgb(150, 229, 209)",
                    Tension = 0.4,
                    PointRadius = 3
                },
                new Dataset()
                {
                    Label = "Assists",
                    Data = killChartInfo.Select(x => x.Assists).ToList(),
                    Fill = false,
                    BorderColor = "rgb(89, 206, 143)",
                    Tension = 0.4,
                    PointRadius = 3
                }
            } 
        });
    }

    public async Task FetchMmrChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _mmrChart);
        var mmrChartInfo = await Mediator.Send(new MmrChartQuery(MmrChartAmount));
        await JS.InvokeAsync<string>("createChart", _mmrChart, new
        {
            labels = mmrChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "Mmr",
                    Data = mmrChartInfo.Select(x => x.Mmr).ToList(),
                    Fill = false,
                    BorderColor = "rgb(75, 192, 192)",
                    Tension = 0.5,
                    PointRadius = 0
                },
                new Dataset()
                {
                    Label = "Match MMR",
                    Data = mmrChartInfo.Select(x => x.TotalMmr).ToList(),
                    Fill = false,
                    BorderColor = "rgb(166, 35, 73)",
                    Tension = 0.5,
                    PointRadius = 0
                }
            } 
        });
    }
    
    public async Task FetchMoneyChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _moneyChart);
        var moneyChartInfo = await Mediator.Send(new MoneyChartQuery(MoneyChartAmount));
        await JS.InvokeAsync<string>("createChart", _moneyChart, new
        {
            labels = moneyChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "Hunt Dollars",
                    Data = moneyChartInfo.Select(x => x.HuntDollars).ToList(),
                    Fill = false,
                    BorderColor = "rgb(75, 192, 192)",
                    Tension = 0.5,
                    PointRadius = 0
                },
            } 
        });
    }
    
    public async Task FetchXpChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _xpChart);
        var XpChartInfo = await Mediator.Send(new XpChartQuery(XpChartAmount));
        await JS.InvokeAsync<string>("createChart", _xpChart, new
        {
            labels = XpChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "XP",
                    Data = XpChartInfo.Select(x => x.Xp).ToList(),
                    Fill = false,
                    BorderColor = "rgb(75, 192, 192)",
                    Tension = 0.5,
                    PointRadius = 0
                },
            } 
        });
    }

    public async Task ToggleCheck()
    {
        if (!worker.CancellationPending)
        {
            if (worker.IsBusy)
            {
                worker.CancelAsync();
            }
            else
            {
                worker.RunWorkerAsync();
            }
        }
        StateHasChanged();
    }
}