@page "/"
@using HuntStats.Data
@using HuntStats.Features
@using HuntStats.Features.ChartHandlers
@using HuntStats.Models
@implements IDisposable
@using HuntStats.State
@using MediatR
@inject IFolderPicker _folderPicker
@inject IDbConnectionFactory _connectionFactory;
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IJSRuntime JS

<div class="card-container" style="margin:  auto;">
    <h5>Overall Statistics</h5> 
    <div class="d-flex flex-row justify-content-between mt-2 mb-3">
        <div class="stats">
            Total Matches: @Totals.Matches
        </div>
        <div class="stats">
            Total Kills: @Totals.Kills
        </div>
        <div class="stats">
            Your kills: @Totals.YourKills
        </div>
        <div class="stats">
            Assists: @Totals.Assists
        </div>
        <div class="stats">
            KD: @(((double)Totals.YourKills / Totals.Deaths).ToString("#.##").Replace("NaN", "0"))
        </div>
        <div class="stats">
            KDA: @(((double)(Totals.YourKills + Totals.Assists) / Totals.Deaths).ToString("#.##").Replace("NaN", "0"))
        </div>
        <div class="stats">
            Deaths: @Totals.Deaths
        </div>
    </div>
    <h5>Graphical statistics</h5>
    <DropdownSelect TValue="int" SearchDisabled="true" ValueChanged="HandleChartsChange" Value="ChartsAmount" ListItems="ListItems"></DropdownSelect>
    <div class="chart-container d-flex flex-xl-row flex-column mt-2">
        <div class="card col position-relative me-xl-2" style="max-height: 750px;">
            <div class="card-body">
                <div class="killChart" style="height: 400px !important;">
                    <canvas @ref="_killChart" id="chart" width="400" height="400">

                    </canvas >
                </div>
                <div class="d-flex flex-row justify-content-between mt-2">
                    <div class="stats">
                        Total Kills: @TotalKills
                    </div>
                    <div class="stats">
                        Your kills: @TotalYourKills
                    </div>
                    <div class="stats">
                        Assists: @TotalAssists
                    </div>
                    <div class="stats">
                        KD: @(((double)TotalYourKills / TotalDeaths).ToString("#.##").Replace("NaN", "0"))
                    </div>
                    <div class="stats">
                        KDA: @(((double)(TotalYourKills + TotalAssists) / TotalDeaths).ToString("#.##").Replace("NaN", "0"))
                    </div>
                    <div class="stats">
                        Deaths: @TotalDeaths
                    </div>
                </div>
            </div>
        </div>
        <div class="card col position-relative mt-4 mt-xl-0 ms-xl-2">
            <div class="card-body">
                <div class="mmrChart">
                    <canvas @ref="_mmrChart" id="chart" width="400" height="400">
                        
                    </canvas>
                </div>
                 <div class="d-flex flex-row justify-content-between mt-2">
                    <div class="stats">
                        Avg MMR: @AverageMmr (<i class="fa fa-long-arrow-up"></i> @HighestMmr, <i class="fa fa-long-arrow-down"></i> @LowestMmr)
                    </div>
                    <div class="stats">
                        Avg Match MMR: @AverageMatchMmr (<i class="fa fa-long-arrow-up"></i> @HighestMatchMmr, <i class="fa fa-long-arrow-down"></i> @LowestMatchMmr)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="chart-container d-flex flex-xl-row flex-column mt-3">
        <div class="card col position-relative me-xl-2" style="max-height: 750px;">
            <div class="card-body">
                <div class="moneyChart">
                    <canvas @ref="_moneyChart" id="chart" width="400" height="400">

                    </canvas>
                </div>
                <div class="d-flex flex-row justify-content-between mt-2">
                    <div class="stats">
                        Average: @AverageMoney
                    </div>
                </div>
            </div>
        </div>
        <div class="card col position-relative mt-4 mt-xl-0 ms-xl-2">
            <div class="card-body">
                <div class="moneyChart">
                    <canvas @ref="_xpChart" id="chart" width="400" height="400">

                    </canvas>
                </div>
                <div class="d-flex flex-row justify-content-between mt-2">
                    <div class="stats">
                        Average: @AverageXp
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="chart-container d-flex flex-xl-row flex-column mt-3">
        <div class="card col position-relative me-xl-2" style="max-height: 750px;">
            <div class="card-body">
                <div class="moneyChart">
                    <canvas @ref="_bossChart" id="chart" width="400" height="400">

                    </canvas>
                </div>
                <div class="d-flex flex-row justify-content-between mt-2">
                    <div class="stats">
                        Spider: @Spider
                    </div>
                    <div class="stats">
                        Scrapbeak: @Scrapbeak
                    </div>
                    <div class="stats">
                        Butcher: @Butcher
                    </div>
                    <div class="stats">
                        Assassin: @Assassin
                    </div>
                </div>
            </div>
        </div>
        <div class="col"></div>
    </div>
</div> 


@code {
    public bool RefreshChart { get; set; } = false;

    private ElementReference _mmrChart;
    private ElementReference _killChart;
    private ElementReference _moneyChart;
    private ElementReference _xpChart;
    private ElementReference _bossChart;

    public TotalView Totals { get; set; } = new();
    public int ChartsAmount { get; set; } = 25;
    public int TotalKills { get; set; }
    public int TotalYourKills { get; set; }
    public int TotalDeaths { get; set; }
    public int TotalAssists { get; set; }
    public int AverageMmr { get; set; } = 0;
    public int HighestMmr { get; set; } = 0;
    public int LowestMmr { get; set; } = 0;
    public int AverageMatchMmr { get; set; } = 0;
    public int HighestMatchMmr { get; set; } = 0;
    public int LowestMatchMmr { get; set; } = 0;
    public int AverageMoney { get; set; } = 0;
    public int AverageXp { get; set; } = 0;
    public int Spider { get; set; } = 0;
    public int Scrapbeak { get; set; } = 0;
    public int Butcher { get; set; } = 0;
    public int Assassin { get; set; } = 0;

    public async Task HandleChartsChange(int Id)
    {
        ChartsAmount = Id;
        await GetChartInfo(true);
    }

    public List<DropdownSelect<int>.ListItem> ListItems { get; set; } = new()
    {
        new DropdownSelect<int>.ListItem()
        {
            Id = 5,
            Variable = "5"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 10,
            Variable = "10"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 25,
            Variable = "25"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 50,
            Variable = "50"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = 100,
            Variable = "100"
        },
        new DropdownSelect<int>.ListItem()
        {
            Id = Int32.MaxValue,
            Variable = "ALL"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        AppState.NewMatchAdded += AppStateOnNewMatchAdded;
        await GetChartInfo();
    }

    public async void Dispose()
    {
        AppState.NewMatchAdded -= AppStateOnNewMatchAdded;
        await JS.InvokeAsync<string>("resetChart", _killChart);
        await JS.InvokeAsync<string>("resetChart", _mmrChart);
        await JS.InvokeAsync<string>("resetChart", _xpChart);
        await JS.InvokeAsync<string>("resetChart", _moneyChart);
        await JS.InvokeAsync<string>("resetChart", _bossChart);
    }

    private async void AppStateOnNewMatchAdded()
    {
        await GetChartInfo(true);
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetChartInfo(bool reset = false)
    {
        await FetchKillChart(reset);
        await FetchMmrChart(reset);
        await FetchMoneyChart(reset);
        await FetchXpChart(reset);
        await FetchBossChart(reset);
        await FetchTotals();
    }

    public async Task FetchTotals()
    {
        Totals = await Mediator.Send(new GetTotalsCommand());
    }

    public async Task FetchBossChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _bossChart);
        var bossChartInfo = await Mediator.Send(new BossChartQuery(ChartsAmount));
        Scrapbeak = bossChartInfo.Scrapbeak;
        Assassin = bossChartInfo.Assassin;
        Butcher = bossChartInfo.Butcher;
        Spider = bossChartInfo.Spider;
        await JS.InvokeAsync<string>("createPieChart", _bossChart, new
        {
            labels = new List<string>()
            {
                "Scrapbeak",
                "Spider",
                "Butcher",
                "Assassin",
            },
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "Bosses",
                    Data = new List<int>()
                    {
                        bossChartInfo.Scrapbeak,
                        bossChartInfo.Spider,
                        bossChartInfo.Butcher,
                        bossChartInfo.Assassin,
                    },
                    BackgroundColor = new List<string>()
                    {
                        "rgb(255, 99, 132)",
                        "rgb(54, 162, 235)",
                        "rgb(255, 205, 86)",
                        "rgb(89, 206, 143)"
                    },
                    HoverOffset = 4
                },
            } 
        });
    }


    public async Task FetchKillChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _killChart);
        var killChartInfo = await Mediator.Send(new KillChartQuery(ChartsAmount));
        TotalKills = killChartInfo.Select(x => x.Kills).Sum();
        TotalYourKills = killChartInfo.Select(x => x.YourKills).Sum();
        TotalDeaths = killChartInfo.Select(x => x.Deaths).Sum();
        TotalAssists = killChartInfo.Select(x => x.Assists).Sum();
        await JS.InvokeAsync<string>("createChart", _killChart, new
        {
            labels = killChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "Total Kills",
                    Data = killChartInfo.Select(x => x.Kills).ToList(),
                    Fill = false,
                    BorderColor = "rgb(166, 35, 73)",
                    Tension = 0.4,
                    PointRadius = 3
                },
                new Dataset()
                {
                    Label = "Your kills",
                    Data = killChartInfo.Select(x => x.YourKills).ToList(),
                    Fill = false,
                    BorderColor = "rgb(208, 112, 0)",
                    Tension = 0.4,
                    PointRadius = 3
                },
                new Dataset()
                {
                    Label = "Deaths",
                    Data = killChartInfo.Select(x => x.Deaths).ToList(),
                    Fill = false,
                    BorderColor = "rgb(150, 229, 209)",
                    Tension = 0.4,
                    PointRadius = 3
                },
                new Dataset()
                {
                    Label = "Assists",
                    Data = killChartInfo.Select(x => x.Assists).ToList(),
                    Fill = false,
                    BorderColor = "rgb(89, 206, 143)",
                    Tension = 0.4,
                    PointRadius = 3
                }
            } 
        });
    }

    public async Task FetchMmrChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _mmrChart);
        var mmrChartInfo = await Mediator.Send(new MmrChartQuery(ChartsAmount));
        var totalMmr = mmrChartInfo.Select(x => x.Mmr).Sum();
        var matchMmrs = mmrChartInfo.Select(x => x.TotalMmr);
        var totalMatchMmr = matchMmrs.Sum();
        if (mmrChartInfo.Count != 0 && totalMmr != 0 && totalMatchMmr != 0)
        {
            AverageMmr = totalMmr / mmrChartInfo.Count;
            HighestMmr = mmrChartInfo.MaxBy(x => x.Mmr).Mmr;
            LowestMmr = mmrChartInfo.MinBy(x => x.Mmr).Mmr;
            AverageMatchMmr = totalMatchMmr / mmrChartInfo.Count;
            HighestMatchMmr = matchMmrs.Max();
            LowestMatchMmr = matchMmrs.Min();
        }
        await JS.InvokeAsync<string>("createChart", _mmrChart, new
        {
            labels = mmrChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "Mmr",
                    Data = mmrChartInfo.Select(x => x.Mmr).ToList(),
                    Fill = false,
                    BorderColor = "rgb(75, 192, 192)",
                    Tension = 0.5,
                    PointRadius = 0
                },
                new Dataset()
                {
                    Label = "Match MMR",
                    Data = mmrChartInfo.Select(x => x.TotalMmr).ToList(),
                    Fill = false,
                    BorderColor = "rgb(166, 35, 73)",
                    Tension = 0.5,
                    PointRadius = 0
                }
            } 
        });
    }
    
    public async Task FetchMoneyChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _moneyChart);
        var moneyChartInfo = await Mediator.Send(new MoneyChartQuery(ChartsAmount));
        var totalHuntDollars = moneyChartInfo.Select(x => x.HuntDollars).Sum();
        if (moneyChartInfo.Count != 0 && totalHuntDollars != 0)
        {
            AverageMoney = totalHuntDollars / moneyChartInfo.Count;
        }
        await JS.InvokeAsync<string>("createChart", _moneyChart, new
        {
            labels = moneyChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "Hunt Dollars",
                    Data = moneyChartInfo.Select(x => x.HuntDollars).ToList(),
                    Fill = false,
                    BorderColor = "rgb(75, 192, 192)",
                    Tension = 0.5,
                    PointRadius = 0
                },
            } 
        });
    }
    
    public async Task FetchXpChart(bool reset = false)
    {
        if(reset) await JS.InvokeAsync<string>("resetChart", _xpChart);
        var xpChartInfo = await Mediator.Send(new XpChartQuery(ChartsAmount));
        var totalXp = xpChartInfo.Select(x => x.Xp).Sum();
        if (xpChartInfo.Count != 0 && totalXp != 0)
        {
            AverageXp = xpChartInfo.Select(x => x.Xp).Sum() / xpChartInfo.Count;
        }
        await JS.InvokeAsync<string>("createChart", _xpChart, new
        {
            labels = xpChartInfo.Select(x => x.DateTime.ToLocalTime().ToString("dd-MM-yyyy HH:mm:ss")),
            datasets = new List<Dataset>()
            {
                new Dataset()
                {
                    Label = "XP",
                    Data = xpChartInfo.Select(x => x.Xp).ToList(),
                    Fill = false,
                    BorderColor = "rgb(75, 192, 192)",
                    Tension = 0.5,
                    PointRadius = 0
                },
            } 
        });
    }
}